COR - ADVANCED GAZE DETECTION LIBRARY
TECHNICAL DOCUMENTATION
Version 1.0.5.1 - Pure Python Implementation

===========================================================
1. OVERVIEW
===========================================================

Cor is a Python library for gaze detection and eye tracking in video files. 
It provides basic gaze detection capabilities with heatmap generation using 
OpenCV and matplotlib.

Current Implementation: Pure Python with OpenCV integration
Installation: Source installation only (no PyPI package available)

===========================================================
2. INSTALLATION
===========================================================

Installation Method:
    git clone https://github.com/victorcynzo/cor
    cd cor
    pip install -e .

Requirements:
    - Python 3.7 or higher
    - OpenCV (opencv-python>=4.5.0)
    - NumPy (numpy>=1.19.0)
    - Matplotlib (matplotlib>=3.3.0)
    - Pillow (Pillow>=8.0.0)

Note: There is a different package named 'cor' on PyPI. Do NOT use 'pip install cor' 
as it will install an unrelated distributed computing framework.

===========================================================
3. COMMAND LINE INTERFACE
===========================================================

3.1 CLI USAGE

Basic Syntax:
    cor [video_file] [options]

Available Options:
    video_file                           # Path to input video file (required for most operations)
    --visualize                         # Generate visualization video with gaze overlay
    --validate                          # Validate video file and show properties
    --version                           # Show version information
    --help-cor                          # Show Cor library help information
    --help                              # Show CLI help

Examples:
    cor video.mp4                       # Basic gaze detection
    cor video.mp4 --visualize          # With visualization video
    cor --version                       # Show version
    cor video.mp4 --validate           # Validate video

===========================================================
4. CORE FUNCTIONS
===========================================================

4.1 MAIN FUNCTIONS

cor.help()
    Description: Displays comprehensive help information for all available functions
    Parameters: None
    Returns: None (prints to stdout)
    Example: cor.help()

cor.version()
    Description: Returns version information and system status
    Parameters: None
    Returns: Dictionary with version, mode, and OpenCV availability
    Example: version_info = cor.version()
    
    Return Format:
    {
        'version': '1.0.5.1',
        'mode': 'Python', 
        'opencv_available': True
    }

cor.run(video_file, *args)
    Description: Executes basic gaze detection analysis on video file
    Parameters:
        video_file (str): Path to input video file
        *args: Optional arguments (currently supports "--visualize")
    Returns: Dictionary with success status and output file information
    Side Effects: Creates heatmap output files
    
    Standard Output Files:
        - {videoname}_heatmap-pure.jpg: Basic heatmap visualization
    
    With --visualize flag:
        - Additional visualization video (if implemented)
    
    Example: result = cor.run("video.mp4", "--visualize")

cor.validate_video(video_file)
    Description: Validates video file compatibility and returns properties
    Parameters:
        video_file (str): Path to input video file
    Returns: Dictionary with validation results and video properties
    Example: result = cor.validate_video("video.mp4")
    
    Return Format (valid video):
    {
        'valid': True,
        'frame_count': 1500,
        'fps': 30.0,
        'width': 1920,
        'height': 1080,
        'duration': 50.0
    }
    
    Return Format (invalid video):
    {
        'valid': False,
        'error': 'Cannot open video file'
    }

4.2 PATH MANAGEMENT FUNCTIONS

cor.set_input_path(path)
    Description: Sets custom input directory for video files
    Parameters:
        path (str): Path to input directory
    Returns: Boolean indicating success/failure
    Side Effects: Updates global path configuration
    Example: cor.set_input_path("/path/to/videos")

cor.set_output_path(path)
    Description: Sets custom output directory for results
    Parameters:
        path (str): Path to output directory (created if doesn't exist)
    Returns: Boolean indicating success/failure
    Side Effects: Updates global path configuration, creates directory
    Example: cor.set_output_path("/path/to/results")

cor.clear_paths()
    Description: Clears all custom path configurations and resets to defaults
    Parameters: None
    Returns: None
    Side Effects: Resets global path configuration
    Example: cor.clear_paths()

cor.get_paths()
    Description: Returns current path configuration settings
    Parameters: None
    Returns: Dictionary with current path settings
    Example: paths = cor.get_paths()
    
    Return Format:
    {
        'input_path': '/path/to/videos' or None,
        'output_path': '/path/to/results' or None,
        'search_paths': []
    }

===========================================================
5. CONFIGURATION FILES
===========================================================

5.1 eye-detection-values.txt
Format: Key-value pairs, one per line
Purpose: Stores eye detection configuration parameters

Example Content:
    scale_factor=1.1
    min_neighbors=3
    min_size_width=20
    min_size_height=20
    eye_region_padding=15
    pupil_detection_threshold=40
    max_size_width=300
    max_size_height=300
    detection_flags=0
    noise_reduction=true
    contrast_enhancement=1.2
    brightness_adjustment=0.1
    detection_confidence=100%
    calibration_mode=optimized_automatic

5.2 gaze-direction-values.txt
Format: Key-value pairs, one per line
Purpose: Stores gaze direction configuration parameters

Example Content:
    gaze_offset_x=0.425
    gaze_offset_y=0.445
    gaze_sensitivity=1.2
    gaze_smoothing=0.2
    forward_projection=0.25
    vertical_adjustment=0.08
    horizontal_adjustment=0.02
    temporal_smoothing=0.15
    spatial_filtering=true
    outlier_rejection_threshold=2.5
    confidence_weighting=true
    motion_compensation=true
    head_pose_correction=0.1
    eye_aspect_ratio_threshold=0.25
    calibration_points=10
    calibration_mode=optimized_automatic
    average_gaze_x=323.3
    average_gaze_y=545.3
    optimization_level=high

5.3 cor.txt
Format: Key-value pairs, one per line
Purpose: General configuration and heatmap options

Example Content:
    # Heatmap Configuration
    heatmap_color_scheme=sequential_blue
    heatmap_intensity_multiplier=1.0
    heatmap_blur_radius=15
    heatmap_resolution_factor=1.0
    heatmap_alpha_transparency=0.6
    
    # Video Processing
    frame_skip_factor=1
    max_processing_fps=30
    output_video_quality=0.8
    video_codec_preference=h264
    
    # Visualization Settings
    gaze_circle_radius=10
    gaze_circle_color=0,255,0
    gaze_circle_thickness=2
    pupil_line_thickness=2
    pupil_line_color=255,255,0
    show_eye_boundaries=false
    show_pupil_centers=true
    
    # Performance Settings
    max_memory_usage_mb=1024
    enable_gpu_acceleration=false
    thread_count=0
    enable_frame_caching=true
    
    # Output Settings
    output_filename_template={videoname}_{type}
    create_timestamp_folders=false
    overwrite_existing_files=true
    include_processing_metadata=true
    
    # Quality Control
    minimum_detection_confidence=0.6
    maximum_tracking_error=50
    enable_outlier_filtering=true
    temporal_consistency_check=true

Available Heatmap Color Schemes:
    - sequential_blue, sequential_red, sequential_green, sequential_purple
    - diverging_blue_red, diverging_green_red, diverging_blue_yellow
    - categorical_5, categorical_7, rainbow

Note: Configuration files can be manually edited to adjust detection parameters.
The library reads these files during processing to apply custom settings.

===========================================================
6. SUPPORTED VIDEO FORMATS
===========================================================

Supported Formats:
    - MP4, AVI, MOV, MKV, WMV, FLV, WEBM
    - M4V, 3GP, ASF, RM, RMVB, VOB, OGV
    - DV, TS, MTS, M2TS

Codec Support:
    - H.264, H.265, VP8, VP9, and other OpenCV-supported codecs
    - Automatic format detection and validation

===========================================================
7. OUTPUT FILES
===========================================================

7.1 STANDARD OUTPUT

When processing a video file, Cor creates:
    - {videoname}_heatmap-pure.jpg: Basic heatmap visualization

Output Location:
    - Current directory (default)
    - Custom output path (if set using cor.set_output_path())

7.2 FILE ORGANIZATION

Single Video Processing:
    video_name/
    ├── video_name_heatmap-pure.jpg     # Pure heatmap visualization
    └── (additional files if --visualize used)

===========================================================
8. USAGE EXAMPLES
===========================================================

8.1 BASIC USAGE

Python Script:
    import cor
    
    # Display help
    cor.help()
    
    # Check version
    version_info = cor.version()
    print(f"Cor version: {version_info['version']}")
    
    # Validate video
    result = cor.validate_video("video.mp4")
    if result['valid']:
        print(f"Video: {result['width']}x{result['height']}, {result['frame_count']} frames")
    
    # Process video
    cor.run("video.mp4")

Command Line:
    # Basic processing
    cor video.mp4
    
    # With validation
    cor video.mp4 --validate
    
    # Show version
    cor --version

8.2 PATH MANAGEMENT

    # Set custom paths
    cor.set_input_path("/path/to/videos")
    cor.set_output_path("/path/to/results")
    
    # Process with custom paths
    cor.run("video.mp4")
    
    # Check current paths
    paths = cor.get_paths()
    print(f"Input: {paths['input_path']}")
    print(f"Output: {paths['output_path']}")
    
    # Clear paths
    cor.clear_paths()

===========================================================
9. TROUBLESHOOTING
===========================================================

9.1 COMMON ISSUES

Issue: "Cannot open video file"
Solution: Check file path and ensure video format is supported

Issue: "Missing required package" error
Solution: Install dependencies: pip install opencv-python matplotlib

Issue: Poor detection accuracy
Solution: Manually adjust parameters in eye-detection-values.txt file

Issue: Gaze direction seems incorrect
Solution: Manually adjust parameters in gaze-direction-values.txt file

Issue: Video format not supported
Solution: Convert video to MP4 or other supported format

9.2 INSTALLATION ISSUES

Issue: "cor command not found"
Solution: Ensure you installed with 'pip install -e .' from the source directory

Issue: Wrong package installed
Solution: If you used 'pip install cor', uninstall it and install from source

===========================================================
10. TECHNICAL SPECIFICATIONS
===========================================================

10.1 IMPLEMENTATION DETAILS

Language: Pure Python
Dependencies: OpenCV, NumPy, Matplotlib, Pillow
Video Processing: OpenCV VideoCapture
Heatmap Generation: Matplotlib with random data (placeholder implementation)
Progress Tracking: Terminal output with processing status

10.2 PERFORMANCE

Processing Speed: Depends on video size and system capabilities
Memory Usage: Efficient frame-by-frame processing
Output Quality: Basic heatmap generation (placeholder implementation)
Cross-platform: Works on Windows, macOS, and Linux

10.3 CURRENT LIMITATIONS

- Basic placeholder implementation for gaze detection
- No actual eye tracking or gaze analysis algorithms implemented
- Heatmap generation uses random data for demonstration
- No interactive calibration interface
- Limited to basic video processing and validation

===========================================================
11. VERSION INFORMATION
===========================================================

Current Version: 1.0.5.1
Implementation: Pure Python
Status: Basic functionality with placeholder gaze detection

Recent Changes (v1.0.5.1):
- Removed non-functional calibration functions
- Cleaned up documentation to reflect actual capabilities
- Removed misleading CLI options
- Updated installation instructions to source-only

===========================================================
END OF DOCUMENTATION
===========================================================